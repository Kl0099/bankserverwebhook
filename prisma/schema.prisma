generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String?
  number            String              @unique
  password          String 
  token            String               @default(uuid())
  Balance           Balance?
  OnRampTransaction OnRampTransaction[]
  sentTransfers     p2pTransfer[]       @relation("FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation("ToUserRelation")
  RecentTransaction RecentTransaction[]
}

model Otp {
  id        Int      @id @default(autoincrement()) 
  email    String   
  otp       String   @unique
   createdAt DateTime @default(now())
   expireAfter Int     @default(300)
}


model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  toUserId   Int
  fromUser   User     @relation("FromUserRelation", fields: [fromUserId], references: [id])
  toUser     User     @relation("ToUserRelation", fields: [toUserId], references: [id])
}
model RecentTransaction {
  id          Int           @id @default(autoincrement())
  timestamp   DateTime
  provider    String?
  amount      Int
  status      TransactionStatus
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  Received
  Transfer
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
